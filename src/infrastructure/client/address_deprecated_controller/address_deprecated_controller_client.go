// Code generated by go-swagger; DO NOT EDIT.

package address_deprecated_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new address deprecated controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for address deprecated controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetDeprecatedAddressByIDUsingGET(params *GetDeprecatedAddressByIDUsingGETParams) (*GetDeprecatedAddressByIDUsingGETOK, error)

	ResolveDeprecatedAddressUsingGET(params *ResolveDeprecatedAddressUsingGETParams) (*ResolveDeprecatedAddressUsingGETOK, error)

	SuggestDeprecatedCitiesUsingGET(params *SuggestDeprecatedCitiesUsingGETParams) (*SuggestDeprecatedCitiesUsingGETOK, error)

	SuggestDeprecatedHousenumbersUsingGET(params *SuggestDeprecatedHousenumbersUsingGETParams) (*SuggestDeprecatedHousenumbersUsingGETOK, error)

	SuggestDeprecatedStreetsUsingGET(params *SuggestDeprecatedStreetsUsingGETParams) (*SuggestDeprecatedStreetsUsingGETOK, error)

	SuggestDeprecatedZipcodesUsingGET(params *SuggestDeprecatedZipcodesUsingGETParams) (*SuggestDeprecatedZipcodesUsingGETOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetDeprecatedAddressByIDUsingGET gets an address by k l s ID
*/
func (a *Client) GetDeprecatedAddressByIDUsingGET(params *GetDeprecatedAddressByIDUsingGETParams) (*GetDeprecatedAddressByIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeprecatedAddressByIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeprecatedAddressByIdUsingGET",
		Method:             "GET",
		PathPattern:        "/api/v1.0/address-lookup/addresses/{klsId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeprecatedAddressByIDUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeprecatedAddressByIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeprecatedAddressByIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResolveDeprecatedAddressUsingGET resolves given address and return the normalized address including its kls Id
*/
func (a *Client) ResolveDeprecatedAddressUsingGET(params *ResolveDeprecatedAddressUsingGETParams) (*ResolveDeprecatedAddressUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResolveDeprecatedAddressUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resolveDeprecatedAddressUsingGET",
		Method:             "GET",
		PathPattern:        "/api/v1.0/address-lookup/resolve",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResolveDeprecatedAddressUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResolveDeprecatedAddressUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resolveDeprecatedAddressUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SuggestDeprecatedCitiesUsingGET views a list of city suggestions for given prefix

  Returned address object's street and street number will be empty.
*/
func (a *Client) SuggestDeprecatedCitiesUsingGET(params *SuggestDeprecatedCitiesUsingGETParams) (*SuggestDeprecatedCitiesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSuggestDeprecatedCitiesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "suggestDeprecatedCitiesUsingGET",
		Method:             "GET",
		PathPattern:        "/api/v1.0/address-lookup/cities",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SuggestDeprecatedCitiesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SuggestDeprecatedCitiesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for suggestDeprecatedCitiesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SuggestDeprecatedHousenumbersUsingGET views a list of streetnumbers suggestions for given prefix
*/
func (a *Client) SuggestDeprecatedHousenumbersUsingGET(params *SuggestDeprecatedHousenumbersUsingGETParams) (*SuggestDeprecatedHousenumbersUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSuggestDeprecatedHousenumbersUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "suggestDeprecatedHousenumbersUsingGET",
		Method:             "GET",
		PathPattern:        "/api/v1.0/address-lookup/streetnumbers",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SuggestDeprecatedHousenumbersUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SuggestDeprecatedHousenumbersUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for suggestDeprecatedHousenumbersUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SuggestDeprecatedStreetsUsingGET views a list of streets suggestions for given prefix

  Returned address object's street number field will always be empty.<br />One of city or zipcode has to be passed as filter.
*/
func (a *Client) SuggestDeprecatedStreetsUsingGET(params *SuggestDeprecatedStreetsUsingGETParams) (*SuggestDeprecatedStreetsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSuggestDeprecatedStreetsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "suggestDeprecatedStreetsUsingGET",
		Method:             "GET",
		PathPattern:        "/api/v1.0/address-lookup/streets",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SuggestDeprecatedStreetsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SuggestDeprecatedStreetsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for suggestDeprecatedStreetsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SuggestDeprecatedZipcodesUsingGET views a list of zipcode suggestions for given prefix

  Returned address object's street and street number will be empty.
*/
func (a *Client) SuggestDeprecatedZipcodesUsingGET(params *SuggestDeprecatedZipcodesUsingGETParams) (*SuggestDeprecatedZipcodesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSuggestDeprecatedZipcodesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "suggestDeprecatedZipcodesUsingGET",
		Method:             "GET",
		PathPattern:        "/api/v1.0/address-lookup/zipcodes",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SuggestDeprecatedZipcodesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SuggestDeprecatedZipcodesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for suggestDeprecatedZipcodesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
