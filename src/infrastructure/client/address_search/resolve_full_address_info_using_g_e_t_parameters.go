// Code generated by go-swagger; DO NOT EDIT.

package address_search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewResolveFullAddressInfoUsingGETParams creates a new ResolveFullAddressInfoUsingGETParams object
// with the default values initialized.
func NewResolveFullAddressInfoUsingGETParams() *ResolveFullAddressInfoUsingGETParams {
	var ()
	return &ResolveFullAddressInfoUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewResolveFullAddressInfoUsingGETParamsWithTimeout creates a new ResolveFullAddressInfoUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewResolveFullAddressInfoUsingGETParamsWithTimeout(timeout time.Duration) *ResolveFullAddressInfoUsingGETParams {
	var ()
	return &ResolveFullAddressInfoUsingGETParams{

		timeout: timeout,
	}
}

// NewResolveFullAddressInfoUsingGETParamsWithContext creates a new ResolveFullAddressInfoUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewResolveFullAddressInfoUsingGETParamsWithContext(ctx context.Context) *ResolveFullAddressInfoUsingGETParams {
	var ()
	return &ResolveFullAddressInfoUsingGETParams{

		Context: ctx,
	}
}

// NewResolveFullAddressInfoUsingGETParamsWithHTTPClient creates a new ResolveFullAddressInfoUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewResolveFullAddressInfoUsingGETParamsWithHTTPClient(client *http.Client) *ResolveFullAddressInfoUsingGETParams {
	var ()
	return &ResolveFullAddressInfoUsingGETParams{
		HTTPClient: client,
	}
}

/*ResolveFullAddressInfoUsingGETParams contains all the parameters to send to the API endpoint
for the resolve full address info using g e t operation typically these are written to a http.Request
*/
type ResolveFullAddressInfoUsingGETParams struct {

	/*HouseQualifier
	  Full house number

	*/
	HouseQualifier string
	/*MunicipalityName
	  Municipality (city) name

	*/
	MunicipalityName string
	/*StreetName
	  Street name

	*/
	StreetName string
	/*ZipCode
	  Zip code

	*/
	ZipCode string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the resolve full address info using g e t params
func (o *ResolveFullAddressInfoUsingGETParams) WithTimeout(timeout time.Duration) *ResolveFullAddressInfoUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the resolve full address info using g e t params
func (o *ResolveFullAddressInfoUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the resolve full address info using g e t params
func (o *ResolveFullAddressInfoUsingGETParams) WithContext(ctx context.Context) *ResolveFullAddressInfoUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the resolve full address info using g e t params
func (o *ResolveFullAddressInfoUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the resolve full address info using g e t params
func (o *ResolveFullAddressInfoUsingGETParams) WithHTTPClient(client *http.Client) *ResolveFullAddressInfoUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the resolve full address info using g e t params
func (o *ResolveFullAddressInfoUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHouseQualifier adds the houseQualifier to the resolve full address info using g e t params
func (o *ResolveFullAddressInfoUsingGETParams) WithHouseQualifier(houseQualifier string) *ResolveFullAddressInfoUsingGETParams {
	o.SetHouseQualifier(houseQualifier)
	return o
}

// SetHouseQualifier adds the houseQualifier to the resolve full address info using g e t params
func (o *ResolveFullAddressInfoUsingGETParams) SetHouseQualifier(houseQualifier string) {
	o.HouseQualifier = houseQualifier
}

// WithMunicipalityName adds the municipalityName to the resolve full address info using g e t params
func (o *ResolveFullAddressInfoUsingGETParams) WithMunicipalityName(municipalityName string) *ResolveFullAddressInfoUsingGETParams {
	o.SetMunicipalityName(municipalityName)
	return o
}

// SetMunicipalityName adds the municipalityName to the resolve full address info using g e t params
func (o *ResolveFullAddressInfoUsingGETParams) SetMunicipalityName(municipalityName string) {
	o.MunicipalityName = municipalityName
}

// WithStreetName adds the streetName to the resolve full address info using g e t params
func (o *ResolveFullAddressInfoUsingGETParams) WithStreetName(streetName string) *ResolveFullAddressInfoUsingGETParams {
	o.SetStreetName(streetName)
	return o
}

// SetStreetName adds the streetName to the resolve full address info using g e t params
func (o *ResolveFullAddressInfoUsingGETParams) SetStreetName(streetName string) {
	o.StreetName = streetName
}

// WithZipCode adds the zipCode to the resolve full address info using g e t params
func (o *ResolveFullAddressInfoUsingGETParams) WithZipCode(zipCode string) *ResolveFullAddressInfoUsingGETParams {
	o.SetZipCode(zipCode)
	return o
}

// SetZipCode adds the zipCode to the resolve full address info using g e t params
func (o *ResolveFullAddressInfoUsingGETParams) SetZipCode(zipCode string) {
	o.ZipCode = zipCode
}

// WriteToRequest writes these params to a swagger request
func (o *ResolveFullAddressInfoUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param houseQualifier
	qrHouseQualifier := o.HouseQualifier
	qHouseQualifier := qrHouseQualifier
	if qHouseQualifier != "" {
		if err := r.SetQueryParam("houseQualifier", qHouseQualifier); err != nil {
			return err
		}
	}

	// query param municipalityName
	qrMunicipalityName := o.MunicipalityName
	qMunicipalityName := qrMunicipalityName
	if qMunicipalityName != "" {
		if err := r.SetQueryParam("municipalityName", qMunicipalityName); err != nil {
			return err
		}
	}

	// query param streetName
	qrStreetName := o.StreetName
	qStreetName := qrStreetName
	if qStreetName != "" {
		if err := r.SetQueryParam("streetName", qStreetName); err != nil {
			return err
		}
	}

	// query param zipCode
	qrZipCode := o.ZipCode
	qZipCode := qrZipCode
	if qZipCode != "" {
		if err := r.SetQueryParam("zipCode", qZipCode); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
