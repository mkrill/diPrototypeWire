// Code generated by go-swagger; DO NOT EDIT.

package address_suggest

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new address suggest API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for address suggest API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddressSuggestionsUsingGET(params *AddressSuggestionsUsingGETParams) (*AddressSuggestionsUsingGETOK, error)

	ExtendedAddressSuggestionsUsingGET(params *ExtendedAddressSuggestionsUsingGETParams) (*ExtendedAddressSuggestionsUsingGETOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddressSuggestionsUsingGET views a list of address data suggestions for given address data

  Returned address suggestions.

If suggestionType is ZIPCODE: field zipCode required, suggests: zipCode, minicipalityName, distributionAreaName
If suggestionType is LOCALITY: field localityName required, field zipCode optional, suggests: zipCode, minicipalityName, distributionAreaName
If suggestionType is STREET: fields zipCode OR localityName(equal to municipalityName), streetName required, suggests: zipCode, minicipalityName, distributionAreaName and streetName
If suggestionType is HOUSE: fields zipCode, localityName(equal to municipalityName), streetName, houseQualifier required, suggests: all fields

*/
func (a *Client) AddressSuggestionsUsingGET(params *AddressSuggestionsUsingGETParams) (*AddressSuggestionsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddressSuggestionsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addressSuggestionsUsingGET",
		Method:             "GET",
		PathPattern:        "/api/addressLookup/v1/addressSuggest/addressSuggestions/{suggestionType}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddressSuggestionsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddressSuggestionsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addressSuggestionsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExtendedAddressSuggestionsUsingGET views a list of address data suggestions for given address data

  Returned address suggestions.

If suggestionType is ZIPCODE: field zipCode required, suggests: zipCode, minicipalityName, distributionAreaName
If suggestionType is LOCALITY: field localityName required, field zipCode optional, suggests: zipCode, minicipalityName, distributionAreaName
If suggestionType is STREET: fields zipCode OR localityName(equal to municipalityName), streetName required, suggests: zipCode, minicipalityName, distributionAreaName and streetName
If suggestionType is HOUSE: fields zipCode, localityName(equal to municipalityName), streetName, houseNumber required, suggests: all fields

*/
func (a *Client) ExtendedAddressSuggestionsUsingGET(params *ExtendedAddressSuggestionsUsingGETParams) (*ExtendedAddressSuggestionsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExtendedAddressSuggestionsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "extendedAddressSuggestionsUsingGET",
		Method:             "GET",
		PathPattern:        "/api/addressLookup/v1/addressSuggest/extended/addressSuggestions/{suggestionType}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExtendedAddressSuggestionsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExtendedAddressSuggestionsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for extendedAddressSuggestionsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
