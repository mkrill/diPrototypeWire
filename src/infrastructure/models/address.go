// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Address Address
//
// Class representing an address / autocompletion.
//
// swagger:model Address
type Address struct {

	// the city of an address
	// Required: true
	City *string `json:"city"`

	// ignore this address when querying
	Deleted bool `json:"deleted,omitempty"`

	// the district of an address
	// Required: true
	District *string `json:"district"`

	// the numeric klsId of this address
	KlsID string `json:"klsId,omitempty"`

	// the street of an address
	// Required: true
	Street *string `json:"street"`

	// the short street of an address
	StreetShort string `json:"streetShort,omitempty"`

	// the street number of an address
	// Required: true
	Streetnumber *string `json:"streetnumber"`

	// the zipcode of an address
	// Required: true
	Zipcode *string `json:"zipcode"`
}

// Validate validates this address
func (m *Address) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistrict(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreetnumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZipcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Address) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateDistrict(formats strfmt.Registry) error {

	if err := validate.Required("district", "body", m.District); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateStreet(formats strfmt.Registry) error {

	if err := validate.Required("street", "body", m.Street); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateStreetnumber(formats strfmt.Registry) error {

	if err := validate.Required("streetnumber", "body", m.Streetnumber); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateZipcode(formats strfmt.Registry) error {

	if err := validate.Required("zipcode", "body", m.Zipcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Address) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Address) UnmarshalBinary(b []byte) error {
	var res Address
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
